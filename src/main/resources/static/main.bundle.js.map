{"version":3,"sources":["webpack:///./src/app/account/account.component.ts","webpack:///./src/app/admin/admin.component.ts","webpack:///./src/app/balance-enquiry/balance-enquiry.component.ts","webpack:///./src/app/change-password/change-password.component.ts","webpack:///./src/app/customer/customers.component.ts","webpack:///./src/app/deposit/deposit.component.ts","webpack:///./src/app/guards/admin-auth-guard.service.ts","webpack:///./src/app/guards/auth-guard.service.ts","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/locker-operations/locker-operations.component.ts","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/user/user.component.ts","webpack:///./src/app/withdraw/withdraw.component.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/app/services/app-data.service.ts","webpack:///./src/app/login/login.component.scss","webpack:///./src/app/account/account.component.css","webpack:///./src/app/admin/admin.component.css","webpack:///./src/app/app.component.css","webpack:///./src/app/balance-enquiry/balance-enquiry.component.css","webpack:///./src/app/change-password/change-password.component.css","webpack:///./src/app/customer/customers.component.css","webpack:///./src/app/deposit/deposit.component.css","webpack:///./src/app/home/home.component.css","webpack:///./src/app/locker-operations/locker-operations.component.css","webpack:///./src/app/user/user.component.css","webpack:///./src/app/withdraw/withdraw.component.css","webpack:///./src/app/account/account.component.html","webpack:///./src/app/admin/admin.component.html","webpack:///./src/app/app.component.html","webpack:///./src/app/balance-enquiry/balance-enquiry.component.html","webpack:///./src/app/change-password/change-password.component.html","webpack:///./src/app/customer/customers.component.html","webpack:///./src/app/deposit/deposit.component.html","webpack:///./src/app/home/home.component.html","webpack:///./src/app/locker-operations/locker-operations.component.html","webpack:///./src/app/login/login.component.html","webpack:///./src/app/user/user.component.html","webpack:///./src/app/withdraw/withdraw.component.html","webpack:///./src/app/services/user.service.ts","webpack:///./src/app/services/auth.constant.ts","webpack:///./src/app/services/authentication.service.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { AppDataService } from '../services/app-data.service';\r\ndeclare let $: any;\r\n\r\n@Component({\r\n    selector: 'app-account',\r\n    templateUrl: './account.component.html',\r\n    styleUrls: ['./account.component.css'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\n\r\nexport class AccountComponent implements OnInit {\r\n\r\n    model: any = {};\r\n    accountsLists: any = [];\r\n    miniStatementLists: any = [];\r\n    ministatementLength: boolean = false;\r\n    isDelete: boolean;\r\n    isEdit: boolean;\r\n    editIndex: number = -1;\r\n    deleteIndex: number = -1;\r\n    accountTypeArr = [{ 'id': 'S', 'name': 'S' }, { 'id': 'J', 'name': 'J' }, { 'id': 'T', 'name': 'T' }, { 'id': 'C', 'name': 'C' }];\r\n    editRow: any;\r\n    deleteRow: any;\r\n    miniStatement: any;\r\n\r\n    constructor(private _data?: AppDataService, private ref?: ChangeDetectorRef) { }\r\n\r\n    ngOnInit() {\r\n        this.loadData();\r\n    }\r\n\r\n    onSubmit() {\r\n        if (Object.keys(this.model).length) {\r\n            if (this._data.mode == \"local\") {\r\n                this.accountsLists.push(this.model);\r\n            }\r\n            else {\r\n                let new_data = {};\r\n                new_data[\"account_num\"] = this.model.account_num;\r\n                new_data[\"account_type\"] = this.model.account_type;\r\n                new_data[\"balance\"] = this.model.balance;\r\n                new_data[\"customer_id\"] = this.model.customer_id;\r\n                new_data[\"flag\"] = \"Y\";\r\n                this._data.postData('/account/create', new_data).subscribe(data => {\r\n                    this.loadData();\r\n                    this.ref.markForCheck();\r\n                });\r\n            }\r\n            this.model = {};\r\n            $(\"#adding_accounts\").modal('hide');\r\n            this.ref.markForCheck();\r\n        }\r\n    }\r\n    onMiniSubmit(){\r\n        if (Object.keys(this.model).length) {\r\n            \r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.loadData();\r\n    }\r\n\r\n    loadData() {\r\n        this._data.getAccount().subscribe(data => {\r\n            this.accountsLists = data;\r\n            this.ref.markForCheck();\r\n        });\r\n    }\r\n\r\n    deleteAccount(index, row) {\r\n        if (!this.isDelete) {\r\n            this.deleteIndex = index;\r\n            this.deleteRow = row;\r\n            this.isDelete = true;\r\n            $(\"#deleting_accounts\").modal('show');\r\n        } else {\r\n\r\n            this.deleteIndex = -1;\r\n            this.isDelete = false;\r\n            if (this._data.mode == \"local\") {\r\n                this.accountsLists.splice(index, 1);\r\n            } else {\r\n                this._data.deleteData(\"/account/delete/\" + row['account_num'], row).subscribe(data => {\r\n                    this.loadData();\r\n                    this.ref.markForCheck();\r\n                });\r\n            }\r\n            $(\"#deleting_accounts\").modal('hide');\r\n        }\r\n        this.ref.markForCheck();\r\n    }\r\n\r\n    editAccount(index, data, row) {\r\n        if (!this.isEdit) {\r\n            this.editIndex = index;\r\n            this.isEdit = true;\r\n            for (var key in data) {\r\n                let newKey = \"_\" + key;\r\n                this.model[newKey] = data[key];\r\n            }\r\n            $(\"#editing_accounts\").modal('show');\r\n        }\r\n        else {\r\n            let new_data = {};\r\n            for (var key in data) {\r\n                let newKey = key.substr(1);\r\n                new_data[newKey] = data[key];\r\n            }\r\n            if (this._data.mode == \"local\") {\r\n                this.accountsLists[index] = new_data;\r\n            } else {\r\n                new_data[\"account_num\"] = data['_account_num'];\r\n                new_data[\"account_type\"] = data['_account_type'];\r\n                new_data[\"balance\"] = data['_balance'];\r\n                new_data[\"customer_id\"] = data['_customer_id'];\r\n                new_data[\"flag\"] = data['_flag'];\r\n                this._data.updateData(\"/account/update\", new_data).subscribe(data => {\r\n                    this.loadData();\r\n                    this.ref.markForCheck();\r\n                });\r\n            }\r\n            this.editIndex = -1;\r\n            this.isEdit = false;\r\n            $(\"#editing_accounts\").modal('hide');\r\n        }\r\n        this.ref.markForCheck();\r\n    }\r\n    getStatement(model) {\r\n        console.log(model[\"account_num\"]);\r\n        this._data.getministatement(\"/deposit/transactions?accountNumber=\" + model[\"account_num\"]).subscribe(data => {\r\n            if (data && data.length) {\r\n                this.miniStatementLists = data;\r\n                this.ministatementLength = false;\r\n                console.log(\"data\", data);\r\n            } else {\r\n                this.ministatementLength = true;\r\n            }\r\n            this.ref.markForCheck();\r\n        });\r\n    }\r\n\r\n    clearForm() {\r\n        this.model = {};\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/account/account.component.ts","import {Component, OnInit} from '@angular/core';\r\n\r\nimport {AppDataService} from '../services/app-data.service';\r\n\r\n@Component({\r\n  selector: 'app-admin',\r\n  templateUrl: './admin.component.html',\r\n  styleUrls: ['./admin.component.css']\r\n})\r\nexport class AdminComponent implements OnInit {\r\n  users$;\r\n\r\n  constructor(private appDataService: AppDataService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.users$ = this.appDataService.getUsers();\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/admin/admin.component.ts","import { Component, OnInit, ChangeDetectorRef, AfterViewInit } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { AppDataService } from '../services/app-data.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-balance-enquiry',\r\n    templateUrl: './balance-enquiry.component.html',\r\n    styleUrls: ['./balance-enquiry.component.css']\r\n})\r\n\r\nexport class BalanceEnquiryComponent implements OnInit {\r\n\r\n    accountNumber: string = \"\";\r\n    availableAmount: string = \"\";\r\n    showBalance: boolean;\r\n    balanceEnquiryData: any;\r\n    balEnquiryForm: FormGroup;\r\n    submitted = false;\r\n    model: any = {};\r\n    showStatements: boolean;\r\n    statementData: any = [];\r\n\r\n    constructor(private formBuilder: FormBuilder, private di: AppDataService, private ref: ChangeDetectorRef, private activatedRoute: ActivatedRoute) { }\r\n\r\n    ngOnInit() {\r\n        this.balEnquiryForm = this.formBuilder.group({\r\n            accountNumber: ['', Validators.required]\r\n        });\r\n    }\r\n\r\n    get f() { return this.balEnquiryForm.controls; }\r\n\r\n    availableBalance() {\r\n\r\n        let tempValue = this.balEnquiryForm.value;\r\n        let url = \"/balance?accountnumber=\" + tempValue.accountNumber;\r\n        this.di.getBalance(url).subscribe(data => {\r\n            this.balanceEnquiryData = data;\r\n            if (tempValue.accountNumber == this.balanceEnquiryData.accountNum) {\r\n                this.availableAmount = this.balanceEnquiryData.balance;\r\n                return this.availableAmount;\r\n            }\r\n            this.ref.markForCheck();\r\n        })\r\n        this.showBalance = true;\r\n    }\r\n\r\n    onSubmit() {\r\n        this.showStatements = true;\r\n        this.di.getStatements('/deposit/getbankstatement?accountNum=' + this.model.accountId + '&fromDate=' + this.model.fromDate + '&toDate=' + this.model.toDate).subscribe(data => {\r\n            this.statementData = data;\r\n            this.ref.markForCheck();\r\n        })\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/balance-enquiry/balance-enquiry.component.ts","import {Component, OnInit, ChangeDetectorRef, ChangeDetectionStrategy, AfterViewInit} from '@angular/core';\r\nimport {AppDataService} from '../services/app-data.service';\r\ndeclare let $: any;\r\n@Component({\r\n  selector: 'app-change-password',\r\n  templateUrl: './change-password.component.html',\r\n  styleUrls: ['./change-password.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n  model: any = {};\r\n  _baseURL: string = '/auth/api/v1/changepassword';\r\n  response: any= \"\";\r\n\r\n  constructor(private _data: AppDataService, private ref?: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onSubmit() {\r\n    if (Object.keys(this.model).length) {\r\n      if (this._data.mode == \"local\") {\r\n          console.log(this.model);\r\n      } \r\n      else {\r\n          console.log(this.model);\r\n          let new_data = {};\r\n          new_data[\"oldPassword\"] = \"\";\r\n          new_data[\"newPassword\"] = \"\";\r\n        \r\n          let data = this.model;\r\n          var keyLen = 0;\r\n          for (var key in data) {\r\n            let newKey = key;\r\n            if (newKey == \"old_password\") {\r\n              new_data[\"oldPassword\"] = data[key];\r\n            } else if (newKey == \"new_password\") {\r\n              new_data[\"newPassword\"] = data[key];\r\n            }  else {\r\n              //new_data[newKey] = data[key];\r\n            }\r\n          }\r\n          this._data.postData(this._baseURL, new_data).subscribe(data => {\r\n            this.response = data;\r\n            this.model = {};\r\n            this.ref.markForCheck();\r\n          }); \r\n      }\r\n      this.ref.markForCheck();\r\n    }\r\n }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/change-password/change-password.component.ts","import { Component, OnInit, ChangeDetectorRef, ChangeDetectionStrategy, AfterViewInit } from '@angular/core';\r\nimport { AppDataService } from '../services/app-data.service';\r\ndeclare let $: any;\r\n@Component({\r\n  selector: 'app-customers',\r\n  templateUrl: './customers.component.html',\r\n  styleUrls: ['./customers.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CustomersComponent implements OnInit, AfterViewInit {\r\n  city$;\r\n  model: any = {};\r\n  customers_list: any = [];\r\n  isDelete: boolean;\r\n  isEdit: boolean;\r\n  editIndex: number = -1;\r\n  deleteIndex: number = -1;\r\n  deleteRow: any;\r\n  searchText: any;\r\n  editRow: any;\r\n\r\n  constructor(private _data: AppDataService, private ref?: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadData();\r\n  }\r\n  onSubmit() {\r\n    if (Object.keys(this.model).length) {\r\n      if (this._data.mode == \"local\") {\r\n        this.customers_list.push(this.model);\r\n      } else {\r\n        let new_data = {};\r\n        new_data[\"address\"] = {};\r\n        new_data[\"address\"][\"activeFlag\"] = \"Y\";\r\n        new_data[\"roleId\"] = 3;\r\n        new_data[\"activeFlag\"] = \"Y\";\r\n\t\tnew_data[\"customerActiveFlag\"] = \"Y\";\r\n        let data = this.model;\r\n        var keyLen = 0;\r\n        for (var key in data) {\r\n          let newKey = key;\r\n          if (newKey == \"buildingName\") {\r\n            new_data[\"address\"][\"buildingName\"] = data[key];\r\n          } else if (newKey == \"street\") {\r\n            new_data[\"address\"][\"street\"] = data[key];\r\n          } else if (newKey == \"city\") {\r\n            new_data[\"address\"][\"city\"] = data[key];\r\n          } else if (newKey == \"state\") {\r\n            new_data[\"address\"][\"state\"] = data[key];\r\n          } else if (newKey == \"customerDob\") {\t\t\t\r\n            new_data[\"customerDob\"] = data[key];\r\n          } else {\r\n            new_data[newKey] = data[key];\r\n          }\r\n        }\r\n\t\tnew_data[\"fax\"] = \"233324\";\r\n        this._data.postData(\"/customer\", new_data).subscribe(data => {\r\n          this.loadData();\r\n          this.ref.markForCheck();\r\n        });\r\n      }\r\n      this.model = {};\r\n      $(\"#add_customers\").modal('hide');\r\n      this.ref.markForCheck();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.loadData();\r\n  }\r\n  loadData() {\r\n\t  console.log(\"loadData\");  \r\n    this._data.getCustomer().subscribe(data => {\t\r\n\t  console.log(data);   \r\n      this.customers_list = data;\r\n      this.ref.markForCheck();\r\n    });\r\n  }\r\n  changeCustomerStatus(index, row) {\r\n    if (!this.isDelete) {\r\n      this.deleteIndex = index;\r\n      this.deleteRow = row;\r\n      this.isDelete = true;\r\n      $(\"#deleeteConfirm\").modal('show');\r\n    } else {\r\n      if (this._data.mode == \"local\") {\r\n        this.customers_list[index]['activeFlag'] = row.activeFlag == 'Y' ? 'N' : 'Y';\r\n\t\tthis.customers_list[index]['address']['activeFlag'] = row['address'].activeFlag == 'Y' ? 'N' : 'Y';\r\n\t\tthis.customers_list[index]['customerActiveFlag'] = row.activeFlag == 'Y' ? 'N' : 'Y';\r\n\t\tthis.customers_list[index]['customerDob'] = this.customers_list[index]['customerDob'];\r\n      } else {\r\n\t\t row[\"fax\"] = \"23332454\";\r\n        row.customerActiveFlag = row.activeFlag == 'Y' ? 'N' : 'Y';\r\n\t\trow['address'].activeFlag = row['address'].activeFlag == 'Y' ? 'N' : 'Y';\r\n\t\trow.activeFlag = row.activeFlag == 'Y' ? 'N' : 'Y';\r\n\t\trow[\"customerDob\"] = row[\"customerDob\"]; \r\n\t\tdelete row[\"userLoginInfo\"];\r\n\t\tdelete row[\"username\"];\r\n\t\tdelete row[\"password\"];\r\n        this._data.updateData(\"/customer/\" + row['customerId'], row).subscribe(data => {\r\n          this.loadData();\r\n          this.ref.markForCheck();\r\n        });\r\n      }\r\n      this.deleteIndex = -1;\r\n      this.isDelete = false;\r\n      $(\"#deleeteConfirm\").modal('hide');\r\n    }\r\n    this.ref.markForCheck();\r\n  }\r\n    editCustomer(index, data, row) {\r\n    if (!this.isEdit) {\r\n      this.editIndex = index;\r\n      this.editRow = row;\r\n      this.isEdit = true;\r\n      for (var key in data) {\r\n        let newKey = \"_\" + key;\r\n\r\n        if (key != \"password\") {\r\n          if (key == \"address\") {\r\n            this.model[\"_buildingName\"] = data[key][\"buildingName\"];\r\n            this.model[\"_street\"] = data[key][\"street\"];\r\n            this.model[\"_city\"] = data[key][\"city\"];\r\n            this.model[\"_state\"] = data[key][\"state\"];\r\n          } else {\r\n            this.model[newKey] = data[key];\r\n          }\r\n        }\r\n      }\r\n\t  this.model[\"_username\"] = data[\"userLoginInfo\"] ? data[\"userLoginInfo\"][\"username\"]: \"\";\r\n      $(\"#edit_customers\").modal('show');\r\n    } else {\r\n      let new_data = {};\r\n      new_data[\"address\"] = {};\r\n\t  //new_data[\"userLoginInfo\"] = {};\r\n\t  new_data[\"address\"][\"activeFlag\"] = \"Y\";\r\n\t  new_data[\"customerActiveFlag\"] = \"Y\";\r\n\t  new_data[\"fax\"] = \"23332454\";\r\n      for (var key in data) {\r\n\t\tif (key != \"userLoginInfo\") {\r\n\t\t\tlet newKey = key.substr(1);\r\n\t\t\tif (newKey != \"password\") {\t\t\t\r\n\t\t\t  if (newKey == \"buildingName\") {\r\n\t\t\t\tnew_data[\"address\"][\"buildingName\"] = data[key];\r\n\t\t\t  } else if (newKey == \"street\") {\r\n\t\t\t\tnew_data[\"address\"][\"street\"] = data[key];\r\n\t\t\t  } else if (newKey == \"city\") {\r\n\t\t\t\tnew_data[\"address\"][\"city\"] = data[key];\r\n\t\t\t  } else if (newKey == \"state\") {\r\n\t\t\t\tnew_data[\"address\"][\"state\"] = data[key];\r\n\t\t\t  } else if (newKey == \"username\") {\r\n\t\t\t\t//new_data[\"userLoginInfo\"][\"username\"] = data[key];\r\n\t\t\t  } else if (newKey == \"userLoginInfo\") {\r\n\t\t\t\t//new_data[\"userLoginInfo\"][\"username\"] = data[key];\r\n\t\t\t  } else if (newKey == \"customerDob\") {\t\t\t\r\n\t\t\t\tnew_data[\"customerDob\"] = data[key];\r\n\t\t\t  } else {\r\n\t\t\t\tnew_data[newKey] = data[key];\r\n\t\t\t  }\t\t\t  \r\n\t\t\t} else {\r\n\t\t\t  //new_data[\"userLoginInfo\"]['password'] = this.customers_list[index]['password'];\r\n\t\t\t}\r\n\t\t}\r\n      }\r\n\t  \r\n      if (this._data.mode == \"local\") {\r\n        this.customers_list[index] = new_data;\r\n      } else {\r\n        this._data.updateData(\"/customer/\" + row['customerId'], new_data).subscribe(data => {\r\n          this.loadData();\r\n          this.ref.markForCheck();\r\n        });\r\n      }\r\n      this.editIndex = -1;\r\n      this.isEdit = false;\r\n      //this.model = {};\r\n      $(\"#edit_customers\").modal('hide');\r\n    }\r\n    this.ref.markForCheck();\r\n  }\r\n  clearForm() {\r\n    this.model = {};\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/customer/customers.component.ts","import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { AppDataService } from '../services/app-data.service';\r\n@Component({\r\n  selector: 'app-deposit',\r\n  templateUrl: './deposit.component.html',\r\n  styleUrls: ['./deposit.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [AppDataService]\r\n})\r\nexport class DepositComponent implements OnInit {\r\n\r\n  model: any = {};\r\n  successMessage: boolean = false;\r\n\r\n  constructor(private _data: AppDataService, private ref?: ChangeDetectorRef) { }\r\n\r\n  \r\n  ngOnInit() {\r\n  }\r\n\r\n  onSubmit() {\r\n    if (Object.keys(this.model).length) {\r\n      if (this._data.mode == \"local\") {\r\n          console.log(this.model);\r\n      } \r\n      else {\r\n          console.log(this.model);\r\n          let new_data = {};\r\n          new_data[\"accountNum\"] = \"\";\r\n          new_data[\"balance\"] = \"\";\r\n         \r\n        \r\n          let data = this.model;\r\n          var keyLen = 0;\r\n          for (var key in data) {\r\n            let newKey = key;\r\n            if (newKey == \"accountNum\") {\r\n              new_data[\"accountNum\"] = data[key];\r\n            } else if (newKey == \"balance\") {\r\n              new_data[\"balance\"] = data[key];\r\n            }  else {\r\n              //new_data[newKey] = data[key];\r\n            }\r\n          }\r\n          this._data.postData(\"/deposit\", new_data).subscribe(data => {\r\n            console.log(data);\r\n            this.successMessage = true;\r\n            this.ref.markForCheck();\r\n          }); \r\n      }\r\n      this.ref.markForCheck();\r\n    }\r\n }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/deposit/deposit.component.ts","import {Injectable} from '@angular/core';\r\nimport {Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from '@angular/router';\r\n\r\nimport {UserService} from '../services/user.service';\r\n\r\n@Injectable()\r\nexport class AdminAuthGuard implements CanActivate {\r\n  constructor(private router: Router, private userService: UserService) {\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const isAdmin = this.userService.isAdminUser();\r\n    if (isAdmin) {\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['login']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/guards/admin-auth-guard.service.ts","import {Injectable} from '@angular/core';\r\nimport {Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot} from '@angular/router';\r\nimport {tokenNotExpired} from 'angular2-jwt';\r\n\r\nimport {TOKEN_NAME} from '../services/auth.constant';\r\nimport {UserService} from '../services/user.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private router: Router, private userService: UserService) {\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    if (tokenNotExpired(TOKEN_NAME, this.userService.accessToken)) {\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['login'], {queryParams: {redirectTo: state.url}});\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/guards/auth-guard.service.ts","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/home.component.ts","import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { AppDataService } from '../services/app-data.service';\r\ndeclare let $: any;\r\n\r\n@Component({\r\n    selector: 'app-locker-operations',\r\n    templateUrl: './locker-operations.component.html',\r\n    styleUrls: ['./locker-operations.component.css'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LockerOperationsComponent implements OnInit {\r\n\r\n    model: any = {};\r\n    successMessage: boolean = false;\r\n    _baseURL: string = 'http://192.168.100.137:9083';\r\n    reportLockerForm: FormGroup;\r\n    reportLockerData: any = [];\r\n    showTable: boolean;\r\n    submitted = false;\r\n\r\n    constructor(private _data: AppDataService, private ref?: ChangeDetectorRef, private formBuilder?: FormBuilder) { }\r\n\r\n    ngOnInit() {\r\n        this.reportLockerForm = this.formBuilder.group({\r\n            lockerNumber: ['', Validators.required],\r\n            lockerOptDate: ['', Validators.required]\r\n        });\r\n    }\r\n\r\n    onSubmit() {\r\n        if (Object.keys(this.model).length) {\r\n            if (this._data.mode == \"local\") {\r\n            }\r\n            else {\r\n                let new_data = {};\r\n                new_data[\"lockerNumber\"] = \"\";\r\n                new_data[\"lockerOperationDateTime\"] = \"\";\r\n                new_data[\"lockerOperationInTime\"] = \"\";\r\n                new_data[\"lockerOperationOutTime\"] = \"\";\r\n                new_data[\"lockerModifiedBy\"] = 3;\r\n\r\n                let data = this.model;\r\n                var keyLen = 0;\r\n                for (var key in data) {\r\n                    let newKey = key;\r\n                    if (newKey == \"lockerNumber\") {\r\n                        new_data[\"lockerNumber\"] = data[key];\r\n                    } else if (newKey == \"lockerOperationDateTime\") {\r\n                        new_data[\"lockerOperationDateTime\"] = data[key];\r\n                    } else if (newKey == \"lockerOperationInTime\") {\r\n                        new_data[\"lockerOperationInTime\"] = data[key];\r\n                    } else if (newKey == \"lockerOperationOutTime\") {\r\n                        new_data[\"lockerOperationOutTime\"] = data[key];\r\n                    } else {\r\n                        //new_data[newKey] = data[key];\r\n                    }\r\n                }\r\n                this._data.postData(\"/locker/addLockerOperations\", new_data).subscribe(data => {\r\n                    this.successMessage = true;\r\n                    this.ref.markForCheck();\r\n                });\r\n            }\r\n            this.ref.markForCheck();\r\n        }\r\n    }\r\n\r\n    //Add Locker:\r\n\r\n    addLocker() {\r\n        if (Object.keys(this.model).length) {\r\n            if (this._data.mode == \"local\") {\r\n            }\r\n            else {\r\n                let new_data = {};\r\n                new_data[\"accountNum\"] = \"\";\r\n                new_data[\"lockerNumber\"] = \"\";\r\n                new_data[\"lockerAssignedBy\"] = \"\";\r\n  \r\n                let data = this.model;\r\n                var keyLen = 0;\r\n                for (var key in data) {\r\n                    let newKey = key;\r\n                    if (newKey == \"accountNum\") {\r\n                        new_data[\"accountNum\"] = data[key];\r\n                    } else if (newKey == \"lockerNumber\") {\r\n                        new_data[\"lockerNumber\"] = data[key];\r\n                    } else if (newKey == \"lockerAssignedBy\") {\r\n                        new_data[\"lockerAssignedBy\"] = data[key];\r\n                    } else {\r\n                        //new_data[newKey] = data[key];\r\n                    }\r\n                }\r\n                this._data.postData(\"/locker/addLocker\", new_data).subscribe(data => {\r\n                    this.successMessage = true;\r\n                    this.ref.markForCheck();\r\n                });\r\n            }\r\n            this.ref.markForCheck();\r\n        }\r\n    }\r\n\r\n    showLockerReport() {\r\n        let tempValue = this.reportLockerForm.value;\r\n        const bDate: Date = new Date(tempValue.lockerOptDate);\r\n        let temp = this.convert(bDate);        \r\n        let url = \"/locker/reportlocker/?lockerNum=\" + tempValue.lockerNumber + \"&lockerOperationDate=\" + temp;\r\n\r\n        this._data.getReportLocker(url).subscribe(data => {\r\n            this.reportLockerData = data;\r\n            this.showTable = true;\r\n            this.ref.markForCheck();\r\n        })\r\n    }\r\n\r\n    convert(str) {\r\n        var date = new Date(str),\r\n            mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\r\n            day = (\"0\" + date.getDate()).slice(-2);\r\n        return [mnth, day, date.getFullYear(),].join(\"/\");\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/locker-operations/locker-operations.component.ts","import {Component, OnInit} from '@angular/core';\r\nimport {Router, ActivatedRoute} from '@angular/router';\r\n\r\nimport {AuthenticationService} from '../services/authentication.service';\r\nimport {UserService} from '../services/user.service';\r\n\r\n@Component({\r\n  selector: 'login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  model: any = {};\r\n  loading = false;\r\n  error = '';\r\n  redirectUrl: string;\r\n\r\n  constructor(private router: Router,\r\n              private activatedRoute: ActivatedRoute,\r\n              private authenticationService: AuthenticationService,\r\n              private userService: UserService) {\r\n    this.redirectUrl = this.activatedRoute.snapshot.queryParams['redirectTo'];\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.logout();\r\n  }\r\n\r\n  login() {\r\n    this.loading = true;\r\n\r\n    this.authenticationService.login(this.model.username, this.model.password)\r\n      .subscribe(\r\n        result => {\r\n          this.loading = false;\r\n\r\n          if (result) {\r\n            this.userService.login(result);\r\n            this.navigateAfterSuccess();\r\n          } else {\r\n            this.error = 'Username or password is incorrect';\r\n          }\r\n        },\r\n        error => {\r\n          this.error = 'Username or password is incorrect';\r\n          this.loading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  private navigateAfterSuccess() {\r\n    if (this.redirectUrl) {\r\n      this.router.navigateByUrl(this.redirectUrl);\r\n    } else {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/login/login.component.ts","import {Component, OnInit, ChangeDetectorRef, ChangeDetectionStrategy, AfterViewInit} from '@angular/core';\r\nimport {AppDataService} from '../services/app-data.service';\r\ndeclare let $: any;\r\n@Component({\r\n  selector: 'app-user',\r\n  templateUrl: './user.component.html',\r\n  styleUrls: ['./user.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class UserComponent implements OnInit, AfterViewInit {\r\n  city$;\r\n  model: any = {};\r\n  accounts_list: any = [];\r\n  isDelete: boolean;\r\n  isEdit: boolean;\r\n  editIndex: number = -1;\r\n  deleteIndex: number = -1;\r\n  deleteRow: any;\r\n  editRow: any;\r\n\r\n  constructor(private _data: AppDataService, private ref?: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadData();    \r\n  }\r\n  onSubmit() {\r\n    if (Object.keys(this.model).length) {\r\n      if (this._data.mode == \"local\") {\r\n        this.accounts_list.push(this.model);\r\n      } else {\r\n        let new_data = {};\r\n        new_data[\"address\"] = {};\r\n        new_data[\"address\"][\"activeFlag\"] = \"\";\r\n        new_data[\"roleId\"] = 3;\r\n        new_data[\"activeFlag\"] = \"Y\";\r\n        let data = this.model;\r\n        var keyLen = 0;\r\n        for (var key in data) {\r\n          let newKey = key;\r\n          if (newKey == \"buildingName\") {\r\n            new_data[\"address\"][\"buildingName\"] = data[key];\r\n          } else if (newKey == \"street\") {\r\n            new_data[\"address\"][\"street\"] = data[key];\r\n          } else if (newKey == \"city\") {\r\n            new_data[\"address\"][\"city\"] = data[key];\r\n          } else if (newKey == \"state\") {\r\n            new_data[\"address\"][\"state\"] = data[key];\r\n          } else {\r\n            new_data[newKey] = data[key];\r\n          }\r\n        }\r\n        this._data.postData(\"/user\", new_data).subscribe(data => {\r\n          this.loadData();\r\n          this.ref.markForCheck();\r\n        });\r\n      }\r\n      this.model = {};\r\n      $(\"#add_accounts\").modal('hide');\r\n      this.ref.markForCheck();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.loadData();\r\n  }\r\n  loadData() {\r\n    console.log(\"loadData\");    \r\n    this._data.getUser().subscribe(data => {\r\n      this.accounts_list = data;\r\n      this.ref.markForCheck();\r\n    });\r\n  }\r\n  changeAccountStatus(index, row) {\r\n    if (!this.isDelete) {\r\n      this.deleteIndex = index;\r\n      this.deleteRow = row;\r\n      this.isDelete = true;\r\n      $(\"#deleeteConfirm\").modal('show');\r\n    } else {\r\n      if (this._data.mode == \"local\") {\r\n        this.accounts_list[index]['activeFlag'] = row.activeFlag == 'Y' ? 'N' : 'Y';\r\n      } else {\r\n        row.activeFlag = row.activeFlag == 'Y' ? 'N' : 'Y';\r\n        this._data.updateData(\"/user/\" + row['userId'], row).subscribe(data => {\r\n          this.loadData();\r\n          this.ref.markForCheck();\r\n        });\r\n      }\r\n      this.deleteIndex = -1;\r\n      this.isDelete = false;\r\n      $(\"#deleeteConfirm\").modal('hide');\r\n    }\r\n    this.ref.markForCheck();\r\n  }\r\n  editAccount(index, data, row) {\r\n    if (!this.isEdit) {\r\n      this.editIndex = index;\r\n      this.editRow = row;\r\n      this.isEdit = true;\r\n      for (var key in data) {\r\n        let newKey = \"_\" + key;\r\n\r\n        if (key != \"password\") {\r\n          if (key == \"address\") {\r\n            this.model[\"_buildingName\"] = data[key][\"buildingName\"];\r\n            this.model[\"_street\"] = data[key][\"street\"];\r\n            this.model[\"_city\"] = data[key][\"city\"];\r\n            this.model[\"_state\"] = data[key][\"state\"];\r\n          } else {\r\n            this.model[newKey] = data[key];\r\n          }\r\n        }\r\n      }\r\n      $(\"#edit_accounts\").modal('show');\r\n    } else {\r\n      let new_data = {};\r\n      new_data[\"address\"] = {};\r\n      for (var key in data) {\r\n        let newKey = key.substr(1);\r\n        if (newKey != \"password\") {\r\n          if (newKey == \"buildingName\") {\r\n            new_data[\"address\"][\"buildingName\"] = data[key];\r\n          } else if (newKey == \"street\") {\r\n            new_data[\"address\"][\"street\"] = data[key];\r\n          } else if (newKey == \"city\") {\r\n            new_data[\"address\"][\"city\"] = data[key];\r\n          } else if (newKey == \"state\") {\r\n            new_data[\"address\"][\"state\"] = data[key];\r\n          } else {\r\n            new_data[newKey] = data[key];\r\n          }\r\n        } else {\r\n          new_data['password'] = this.accounts_list[index]['password'];\r\n        }\r\n      }\r\n      if (this._data.mode == \"local\") {\r\n        this.accounts_list[index] = new_data;\r\n      } else {\r\n        this._data.updateData(\"/user/\" + row['userId'], new_data).subscribe(data => {\r\n          this.loadData();\r\n          this.ref.markForCheck();\r\n        });\r\n      }\r\n      this.editIndex = -1;\r\n      this.isEdit = false;\r\n      //this.model = {};\r\n      $(\"#edit_accounts\").modal('hide');\r\n    }\r\n    this.ref.markForCheck();\r\n  }\r\n  clearForm() {\r\n    this.model = {};\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/user/user.component.ts","import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { AppDataService } from '../services/app-data.service';\r\n\r\n@Component({\r\n  selector: 'app-withdraw',\r\n  templateUrl: './withdraw.component.html',\r\n  styleUrls: ['./withdraw.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [AppDataService]\r\n})\r\nexport class WithdrawComponent implements OnInit {\r\n\r\n  model: any = {};\r\n  successMessage: boolean = false;\r\n\r\n  constructor(private _data: AppDataService, private ref?: ChangeDetectorRef) { }\r\n\r\n  \r\n  ngOnInit() {\r\n  }\r\n\r\n  onSubmit() {\r\n    if (Object.keys(this.model).length) {\r\n      if (this._data.mode == \"local\") {\r\n          console.log(this.model);\r\n      } \r\n      else {\r\n          console.log(this.model);\r\n          let new_data = {};\r\n          new_data[\"accountNum\"] = \"\";\r\n          new_data[\"balance\"] = \"\";\r\n         \r\n        \r\n          let data = this.model;\r\n          var keyLen = 0;\r\n          for (var key in data) {\r\n            let newKey = key;\r\n            if (newKey == \"accountNum\") {\r\n              new_data[\"accountNum\"] = data[key];\r\n            } else if (newKey == \"balance\") {\r\n              new_data[\"balance\"] = data[key];\r\n            }  else {\r\n              //new_data[newKey] = data[key];\r\n            }\r\n          }\r\n          this._data.postData(\"/withdraw\", new_data).subscribe(data => {\r\n            console.log(data);\r\n            this.successMessage = true;\r\n            this.ref.markForCheck();\r\n          }); \r\n      }\r\n      this.ref.markForCheck();\r\n    }\r\n }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/withdraw/withdraw.component.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 168;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 168\n// module chunks = 1","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\nimport { AdminComponent } from './admin/admin.component';\r\nimport { AuthGuard } from './guards/auth-guard.service';\r\nimport { AdminAuthGuard } from './guards/admin-auth-guard.service';\r\n\r\nimport { HomeComponent } from './home/home.component';\r\nimport { UserComponent } from './user/user.component';\r\n\r\nimport { LockerOperationsComponent } from './locker-operations/locker-operations.component';\r\nimport { ChangePasswordComponent } from './change-password/change-password.component';\r\nimport { AccountComponent } from './account/account.component';\r\nimport { BalanceEnquiryComponent } from './balance-enquiry/balance-enquiry.component';\r\nimport { CustomersComponent } from './customer/customers.component';\r\nimport { DepositComponent } from './deposit/deposit.component';\r\nimport { WithdrawComponent } from './withdraw/withdraw.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent\r\n  },\r\n  {\r\n    path: 'home',\r\n    component: HomeComponent\r\n  },\r\n  {\r\n    path: 'lockerOperations',\r\n    component: LockerOperationsComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'changePassword',\r\n    component: ChangePasswordComponent\r\n  },\r\n  {\r\n    path: 'list_account',\r\n    component: AccountComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'bal_enquiry',\r\n    component: BalanceEnquiryComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'admin',\r\n    component: AdminComponent,\r\n    canActivate: [AuthGuard, AdminAuthGuard]\r\n  },\r\n  {\r\n    path: 'customer',\r\n    component: CustomersComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'deposit',\r\n    component: DepositComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'withdraw',\r\n    component: WithdrawComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: 'user',\r\n    component: UserComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: '/home'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app-routing.module.ts","import {Component, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\nimport {TOKEN_NAME} from './services/auth.constant';\r\nimport {UserService} from './services/user.service';\r\nimport { AuthenticationService } from './services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent{\r\n  title = 'Banking Microservices';\r\n  isLoggedIn: boolean;\r\n\r\n  constructor(private router: Router, private userService: UserService, private cdRef:ChangeDetectorRef, private auth: AuthenticationService) { }\r\n\r\n  ngAfterViewChecked() { \r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  logout() {\r\n    this.router.navigate(['/login']);\r\n    this.auth.logout();\r\n  }\r\n\r\n  get isAdminUser() {\r\n    return this.userService.isAdminUser();\r\n  }\r\n\r\n  isUser() {\r\n    return this.auth.isUser();\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Http, HttpModule } from '@angular/http';\r\nimport { AuthConfig, AuthHttp } from 'angular2-jwt';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { AdminComponent } from './admin/admin.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { UserComponent } from './user/user.component';\r\n\r\nimport { UserService } from './services/user.service';\r\nimport { AuthenticationService } from './services/authentication.service';\r\nimport { AuthGuard } from './guards/auth-guard.service';\r\nimport { AdminAuthGuard } from './guards/admin-auth-guard.service';\r\nimport { TOKEN_NAME } from './services/auth.constant';\r\nimport { AppDataService } from './services/app-data.service';\r\nimport { LockerOperationsComponent } from './locker-operations/locker-operations.component';\r\nimport { ChangePasswordComponent } from './change-password/change-password.component';\r\nimport { AccountComponent } from './account/account.component';\r\nimport { BalanceEnquiryComponent } from './balance-enquiry/balance-enquiry.component';\r\nimport { CustomersComponent } from './customer/customers.component';\r\nimport { DepositComponent } from './deposit/deposit.component';\r\nimport { WithdrawComponent } from './withdraw/withdraw.component';\r\n\r\nexport function authHttpServiceFactory(http: Http) {\r\n  return new AuthHttp(new AuthConfig({\r\n    headerPrefix: 'Bearer',\r\n    tokenName: TOKEN_NAME,\r\n    globalHeaders: [{ 'Content-Type': 'application/json' }],\r\n    noJwtError: true,\r\n    noTokenScheme: true,\r\n    tokenGetter: (() => localStorage.getItem(TOKEN_NAME))\r\n  }), http);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    AdminComponent,\r\n    UserComponent,\r\n    LoginComponent,\r\n    LockerOperationsComponent,\r\n    ChangePasswordComponent,\r\n    AccountComponent,\r\n    BalanceEnquiryComponent,\r\n    CustomersComponent,\r\n    DepositComponent,\r\n    WithdrawComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpModule,\r\n    ReactiveFormsModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [\r\n    { provide: AuthHttp, useFactory: authHttpServiceFactory, deps: [Http] },\r\n    AuthenticationService,\r\n    UserService,\r\n    AuthGuard,\r\n    AdminAuthGuard,\r\n    AppDataService\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { Injectable } from '@angular/core';\r\nimport { AuthHttp } from 'angular2-jwt';\r\n\r\n@Injectable()\r\nexport class AppDataService {\r\n  constructor(private http: AuthHttp) {\r\n  }\r\n  mode: string = \"product\";\r\n\r\n  getUser() {\r\n    return this.http.get('/user').map(res => res.json());\r\n  }\r\n\r\n  getUsers() {\r\n    return this.http.get('/user').map(res => res.json());\r\n  }\r\n\r\n  postData(url, data) {\r\n    console.log(data)\r\n    let response = this.http.post(url, data).map(res => res);\r\n    return response;\r\n  }\r\n\r\n  updateData(url, data) {\r\n    console.log('updated data', data)\r\n    let response = this.http.put(url, data).map(res => res);\r\n    return response;\r\n  }\r\n\r\n  deleteData(url, data) {\r\n    console.log(data)\r\n    let response = this.http.delete(url).map(res => res);\r\n    return response;\r\n  }\r\n\r\n  getAccount() {\r\n    return this.http.get('/account').map(res => res.json());\r\n  }\r\n  getministatement(url) {\r\n    console.log(\"url\", url);\r\n    return this.http.get(url).map(res => res.json());\r\n  }\r\n\r\n  // getAccounts() {\r\n  //   return this.http.get('/accounts').map(res => res.json());\r\n  // }\r\n\r\n  getBalance(url) {\r\n    return this.http.get(url).map(res => res.json());\r\n  }\r\n\r\n  getCustomer() {\r\n    return this.http.get('/customer').map(res => res.json());\r\n  }\r\n\r\n  getCustomers() {\r\n    return this.http.get('/customer').map(res => res.json());\r\n  }\r\n\r\n  getReportLocker(url) {\r\n    return this.http.get(url).map(res => res.json());\r\n  }\r\n\r\n  getStatements(url) {\r\n    return this.http.get(url).map(res => res.json());\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/app-data.service.ts","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".form-wrapper {\\n  display: block;\\n  max-width: 400px;\\n  margin: 0 auto 0; }\\n\\nform input {\\n  margin: 20px 0;\\n  height: 45px; }\\n\\nbutton {\\n  width: 100%;\\n  height: 45px; }\\n\\np {\\n  text-align: center; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/login/login.component.scss\n// module id = 333\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".get-statement{\\r\\n    margin-top: 30px;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/account/account.component.css\n// module id = 334\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/admin.component.css\n// module id = 335\n// module chunks = 1","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"h1 {\\r\\n  text-align: center;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 336\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"input[type=\\\"number\\\"]::-webkit-outer-spin-button, input[type=\\\"number\\\"]::-webkit-inner-spin-button {\\r\\n    -webkit-appearance: none;\\r\\n    margin: 0;\\r\\n}\\r\\n \\r\\ninput[type=\\\"number\\\"] {\\r\\n    -moz-appearance: textfield;\\r\\n}\\r\\n\\r\\n.pad-left-0{\\r\\n    padding-left: 0px;\\r\\n}\\r\\n\\r\\n.mar-top-15{\\r\\n    margin-top: 15px;\\r\\n}\\r\\n\\r\\n.cleaner{\\r\\n    clear: both;\\r\\n}\\r\\n\\r\\n.mar-t-15{\\r\\n    margin-top: 15px;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/balance-enquiry/balance-enquiry.component.css\n// module id = 337\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/change-password/change-password.component.css\n// module id = 338\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".search{\\r\\n    float: right;\\r\\n    margin-top: 15px;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/customer/customers.component.css\n// module id = 339\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/deposit/deposit.component.css\n// module id = 340\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.css\n// module id = 341\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".cleaner{\\r\\n    clear: both;\\r\\n}\\r\\n.mar-t-15{\\r\\n    margin-top: 15px;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/locker-operations/locker-operations.component.css\n// module id = 342\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/user/user.component.css\n// module id = 343\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/withdraw/withdraw.component.css\n// module id = 344\n// module chunks = 1","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n    <div class=\\\"page\\\">\\r\\n        <div class=\\\"page-inner\\\">\\r\\n            <div class=\\\"col-12\\\" style=\\\"margin-top: 20px;\\\">\\r\\n                <div class=\\\"text-right\\\">\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-info btn-xs\\\" data-toggle=\\\"modal\\\" data-target=\\\"#adding_accounts\\\">Add Account\\r\\n                    </button>\\r\\n                </div>\\r\\n                <h2>Total Accounts:</h2>\\r\\n                <table class=\\\"table table-bordered table-condensed\\\">\\r\\n                    <tr>\\r\\n                        <th>Customer ID</th>\\r\\n                        <th>Account ID</th>\\r\\n                        <th>Account Number</th>\\r\\n                        <th>Account Type</th>\\r\\n                        <th>Balance</th>\\r\\n                        <th width=\\\"100\\\">&nbsp;</th>\\r\\n                    </tr>\\r\\n                    <ng-container *ngIf=\\\"accountsLists.length\\\">\\r\\n                        <tr *ngFor=\\\"let account of accountsLists;let ind=index\\\">\\r\\n                            <td>{{account['customer_id']}}</td>\\r\\n                            <td>{{account['id']}}</td>\\r\\n                            <td>{{account['account_num']}}</td>\\r\\n                            <td>{{account['account_type']}}</td>\\r\\n                            <td>{{account['balance']}}</td>\\r\\n                            <td>\\r\\n                                <a class=\\\"btn btn-primary btn-xs\\\" (click)=\\\"editAccount(ind, account, account)\\\" style=\\\"margin-right: 10px;color:#FFF\\\">\\r\\n                                    <i class=\\\"icon icon-pencil\\\"></i>\\r\\n                                </a>\\r\\n                                <a class=\\\"btn btn-danger btn-xs\\\" (click)=\\\"deleteAccount(ind, account)\\\" style=\\\"margin-right: 10px;color: #FFF;\\\">\\r\\n                                    <i class=\\\"icon icon-remove\\\"></i>\\r\\n                                </a>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngIf=\\\"!accountsLists.length\\\">\\r\\n                        <tr>\\r\\n                            <td colspan=\\\"8\\\" class=\\\"text-center\\\">Records not found</td>\\r\\n                        </tr>\\r\\n                    </ng-container>\\r\\n                </table>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"modal\\\" id=\\\"adding_accounts\\\" role=\\\"dialog\\\">\\r\\n    <div class=\\\"modal-dialog modal-lg\\\">\\r\\n        <!-- Modal content-->\\r\\n        <div class=\\\"modal-content\\\">\\r\\n            <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n                <div class=\\\"modal-header\\\">\\r\\n                    <h4 class=\\\"modal-title\\\">Add Account</h4>\\r\\n                    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\r\\n                </div>\\r\\n                <div class=\\\"modal-body\\\">\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"customer_id\\\">Customer ID</label>\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.customer_id\\\" #customer_id=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && customer_id.invalid}\\\"\\r\\n                                    name=\\\"customer_id\\\" required />\\r\\n                                <div *ngIf=\\\"f.submitted && customer_id.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"customer_id.errors.required\\\">Customer ID is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"account_num\\\">Account Number</label>\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.account_num\\\" #account_num=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && account_num.invalid}\\\"\\r\\n                                    name=\\\"account_num\\\" required />\\r\\n                                <div *ngIf=\\\"f.submitted && account_num.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"account_num.errors.required\\\">Account Number is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"account_type\\\">Account Type</label>\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.account_type\\\" #account_type=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && account_type.invalid}\\\"\\r\\n                                    name=\\\"account_type\\\" required />\\r\\n                                <div *ngIf=\\\"f.submitted && account_type.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"account_type.errors.required\\\">Account Type is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"balance\\\">Balance</label>\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.balance\\\" #balance=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && balance.invalid}\\\"\\r\\n                                    name=\\\"balance\\\" required />\\r\\n                                <div *ngIf=\\\"f.submitted && balance.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"balance.errors.required\\\">Balance is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"modal-footer\\\">\\r\\n                    <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF\\\">Create</button>\\r\\n                    <a class=\\\"btn btn-default btn-xs\\\" data-dismiss=\\\"modal\\\" (click)=\\\"clearForm()\\\">Close</a>\\r\\n                </div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div class=\\\"modal\\\" id=\\\"editing_accounts\\\" role=\\\"dialog\\\">\\r\\n    <div class=\\\"modal-dialog\\\">\\r\\n        <!-- Modal content-->\\r\\n        <div class=\\\"modal-content\\\">\\r\\n            <form name=\\\"uform\\\" (ngSubmit)=\\\"uf.form.valid && editAccount(editIndex, model, editRow)\\\" #uf=\\\"ngForm\\\" novalidate>\\r\\n                <div class=\\\"modal-header\\\">\\r\\n                    <h4 class=\\\"modal-title\\\">Edit Accounts</h4>\\r\\n                    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\r\\n                </div>\\r\\n                <div class=\\\"modal-body\\\">\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-6\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"_account_type\\\">Account Type</label>\\r\\n                                <select class=\\\"form-control\\\" id=\\\"_account_type\\\" name=\\\"_account_type\\\" #_account_type=\\\"ngModel\\\" [(ngModel)]=\\\"model._account_type\\\"\\r\\n                                    [ngClass]=\\\"{'is-invalid':uf.submitted && _account_type.invalid}\\\">\\r\\n                                    <option *ngFor=\\\"let accType of accountTypeArr\\\" [value]=\\\"accType.id\\\">{{accType.name}}</option>\\r\\n                                </select>\\r\\n\\r\\n                                <div *ngIf=\\\"uf.submitted && _account_type.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"_account_type.errors.required\\\">Account Type is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"modal-footer\\\">\\r\\n                    <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF;\\\">Update</button>\\r\\n                    <a class=\\\"btn btn-default btn-xs\\\" data-dismiss=\\\"modal\\\" (click)=\\\"clearForm()\\\">Close</a>\\r\\n                </div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"modal\\\" id=\\\"deleting_accounts\\\" role=\\\"dialog\\\">\\r\\n    <div class=\\\"modal-dialog\\\">\\r\\n        <!-- Modal content-->\\r\\n        <div class=\\\"modal-content\\\">\\r\\n            <div class=\\\"modal-header\\\">\\r\\n                <h4 class=\\\"modal-title\\\">Delete Account</h4>\\r\\n                <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\r\\n            </div>\\r\\n            <div class=\\\"modal-body\\\">\\r\\n                <p>Are you sure?\\r\\n                    <br/> Do you want to delete Account</p>\\r\\n            </div>\\r\\n            <div class=\\\"modal-footer\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary btn-xs\\\" (click)=\\\"deleteAccount(deleteIndex, deleteRow)\\\">Confirm</button>\\r\\n                <a class=\\\"btn btn-default btn-xs\\\" data-dismiss=\\\"modal\\\" (click)=\\\"clearForm()\\\">Close</a>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onMiniSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n    <div class=\\\"col-12\\\" style=\\\"margin-top: 20px;\\\">\\r\\n        <h2>Mini statement</h2>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"account_num\\\">Account Number</label>\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.account_num\\\" #account_num=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && account_num.invalid}\\\"\\r\\n                        name=\\\"account_num\\\" required />\\r\\n                    <div *ngIf=\\\"f.submitted && account_num.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                        <div *ngIf=\\\"account_num.errors.required\\\">Account Number is required</div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <!-- <div class=\\\"col-md-3\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"AccountStartDate\\\">Start Date</label>\\r\\n                    <input type=\\\"date\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.AccountStartDate\\\" #AccountStartDate=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && AccountStartDate.invalid}\\\"\\r\\n                        name=\\\"AccountStartDate\\\" required />\\r\\n                    <div *ngIf=\\\"f.submitted && AccountStartDate.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                        <div *ngIf=\\\"AccountStartDate.errors.required\\\">Start Date is required</div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"AccountEndDate\\\">End Date</label>\\r\\n                    <input type=\\\"date\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.AccountEndDate\\\" #AccountEndDate=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && AccountEndDate.invalid}\\\"\\r\\n                        name=\\\"AccountEndDate\\\" required />\\r\\n                    <div *ngIf=\\\"f.submitted && AccountEndDate.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                        <div *ngIf=\\\"AccountEndDate.errors.required\\\">End Date is required</div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div> -->\\r\\n            <button class=\\\"btn btn-primary btn-xs get-statement\\\" style=\\\"color: #FFF\\\" (click)=\\\"getStatement(model)\\\">GetStatement</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\\r\\n<div class=\\\"col-12\\\" style=\\\"margin-top: 20px;\\\">\\r\\n    <ng-container *ngIf=\\\"miniStatementLists.length;else other_content\\\">\\r\\n        <table class=\\\"table table-bordered table-condensed\\\">\\r\\n            <tr>\\r\\n                <th>Transaction Type</th>\\r\\n                <th>Deposite Amount</th>\\r\\n                <th>Withdraw Amount</th>\\r\\n                <th>Transaction Date/Time</th>\\r\\n            </tr>\\r\\n            <tr *ngFor=\\\"let ministatement of miniStatementLists;let ind=index\\\">\\r\\n                <td>{{ministatement['transactionType']}}</td>\\r\\n                <td>{{ministatement['depositAmount']}}</td>\\r\\n                <td>{{ministatement['withdrawAmount']}}</td>\\r\\n                <td>{{ministatement['transactionDateTime']}}</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </ng-container>\\r\\n    <ng-container *ngIf=\\\"ministatementLength\\\">\\r\\n        <table class=\\\"table table-bordered table-condensed\\\">\\r\\n            <tr>\\r\\n                <th>Transaction Type</th>\\r\\n                <th>Deposite Amount</th>\\r\\n                <th>Withdraw Amount</th>\\r\\n                <th>Transaction Date/Time</th>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td colspan=\\\"4\\\" class=\\\"text-center\\\">Records not found</td>\\r\\n              </tr>\\r\\n        </table>\\r\\n    </ng-container>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/account/account.component.html\n// module id = 346\n// module chunks = 1","module.exports = \"<h2>\\r\\n  Admin screen. Available for Admin users\\r\\n</h2>\\r\\n\\r\\n<p>Here is the data received from SpringBoot API for Admin users ONLY</p>\\r\\n\\r\\n<pre>{{users$| async | json}}</pre>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/admin.component.html\n// module id = 347\n// module chunks = 1","module.exports = \"<h1>\\r\\n{{title}}\\r\\n</h1>\\r\\n<nav class=\\\"navbar navbar-default\\\">\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <ul class=\\\"nav navbar-nav\\\" *ngIf=\\\"!isUser()\\\">\\r\\n      <li routerLinkActive=\\\"active\\\"><a routerLink=\\\"/user\\\">Login</a></li>\\r\\n    </ul>\\r\\n    <ul class=\\\"nav navbar-nav\\\" *ngIf=\\\"isUser()\\\">\\r\\n      <li routerLinkActive=\\\"active\\\"><a routerLink=\\\"/user\\\">User</a></li>\\r\\n      <li routerLinkActive=\\\"active\\\"><a routerLink=\\\"/customer\\\">Customer</a></li>\\r\\n      <li routerLinkActive=\\\"active\\\"><a routerLink=\\\"/list_account\\\">Account</a></li>\\r\\n      <li routerLinkActive=\\\"active\\\"><a routerLink=\\\"/bal_enquiry\\\">Balance Enquiry</a></li>\\r\\n      <li routerLinkActive=\\\"active\\\"><a routerLink=\\\"/deposit\\\">Deposit</a></li>\\r\\n      <li routerLinkActive=\\\"active\\\"><a routerLink=\\\"/lockerOperations\\\">Locker Operations</a></li>\\r\\n      <li routerLinkActive=\\\"active\\\"><a routerLink=\\\"/withdraw\\\">WithDraw</a></li>\\r\\n    </ul>\\r\\n    <ul class=\\\"nav navbar-nav navbar-right\\\" *ngIf=\\\"isUser()\\\">\\r\\n      <p class=\\\"navbar-text\\\" *ngIf=\\\"isUser\\\">You are user!</p>\\r\\n      <li routerLinkActive=\\\"active\\\"><a routerLink=\\\"/changePassword\\\">Change Password</a></li>\\r\\n      <li><button class=\\\"btn navbar-btn\\\" (click)=\\\"logout()\\\">Logout</button></li>\\r\\n    </ul>\\r\\n  </div>\\r\\n</nav>\\r\\n\\r\\n<div class=\\\"container\\\">\\r\\n  <router-outlet></router-outlet>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 348\n// module chunks = 1","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n    <div class=\\\"page\\\">\\r\\n        <div class=\\\"page-inner\\\">\\r\\n            <div class=\\\"col-12 pad-left-0\\\">\\r\\n                <h2>Balance Enquiry</h2>\\r\\n                <div class=\\\"col-sm-4 pad-left-0\\\">\\r\\n                    <form [formGroup]=\\\"balEnquiryForm\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label>Account Number:</label>\\r\\n                            <input type=\\\"text\\\" formControlName=\\\"accountNumber\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.accountNumber.errors }\\\"/>\\r\\n                            <div *ngIf=\\\"submitted && f.accountNumber.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                <div *ngIf=\\\"f.accountNumber.errors.required\\\">Account Number is required</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"cleaner\\\"></div>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary btn-xs\\\" (click)=\\\"availableBalance()\\\">Search&nbsp;\\r\\n                <i class=\\\"fa fa-search\\\"></i>\\r\\n            </button>\\r\\n\\r\\n            <div *ngIf=\\\"showBalance\\\" class=\\\"col-12 pad-left-0 mar-top-15\\\">\\r\\n                <label>Available Amount:</label>\\r\\n                <input type=\\\"number\\\" id=\\\"availableAmount\\\" name=\\\"availableAmount\\\" [(ngModel)]=\\\"availableAmount\\\" value=\\\"{{availableAmount}}\\\" disabled>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"page-inner\\\">\\r\\n            <h2>Custom Statement</h2>\\r\\n            <form name=\\\"custom-statement\\\" (ngSubmit)=\\\"custom_statement.form.valid && onSubmit()\\\" #custom_statement=\\\"ngForm\\\" novalidate>\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-md-3\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"accountId\\\">Account Number</label>\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.accountId\\\" #accountId=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':custom_statement.submitted && accountId.invalid}\\\"\\r\\n                                name=\\\"accountId\\\" required />\\r\\n                            <div *ngIf=\\\"custom_statement.submitted && accountId.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                <div *ngIf=\\\"accountId.errors.required\\\">Account Number is required</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-md-3\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"fromDate\\\">Date From :</label>\\r\\n                            <input type=\\\"date\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.fromDate\\\" #fromDate=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':custom_statement.submitted && fromDate.invalid}\\\"\\r\\n                                name=\\\"fromDate\\\" required  step=1 />\\r\\n                            <div *ngIf=\\\"custom_statement.submitted && fromDate.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                <div *ngIf=\\\"fromDate.errors.required\\\">Date From is required</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-md-3\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"toDate\\\">Date To :</label>\\r\\n                            <input type=\\\"date\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.toDate\\\" #toDate=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':custom_statement.submitted && toDate.invalid}\\\"\\r\\n                                name=\\\"toDate\\\" required step=1 />\\r\\n                            <div *ngIf=\\\"custom_statement.submitted && toDate.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                <div *ngIf=\\\"toDate.errors.required\\\">Date To is required</div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div> \\r\\n                <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF\\\">Submit</button>  \\r\\n            </form>\\r\\n            <div class=\\\"cleaner\\\"></div>\\r\\n            <div class=\\\"mar-t-15\\\">\\r\\n                <table *ngIf=\\\"showStatements\\\" class=\\\"table table-bordered table-condensed\\\">\\r\\n                    <tr>\\r\\n                        <th>S. No</th>\\r\\n                        <th>Account Number</th>\\r\\n                        <th>Debit</th>\\r\\n                        <th>Credit</th>\\r\\n                        <th>Transaction Date</th>\\r\\n                    </tr>\\r\\n                    <ng-container *ngIf=\\\"statementData.length\\\">\\r\\n                        <tr *ngFor=\\\"let account of statementData;let ind=index\\\">\\r\\n                            <td>{{ind+1}}</td>\\r\\n                            <td>{{account['accountNum']}}</td>\\r\\n                            <td>{{account['depositAmount']}}</td>\\r\\n                            <td>{{account['withdrawAmount']}}</td>\\r\\n                            <td>{{account['transactionDateTime']}}</td>                            \\r\\n                        </tr>\\r\\n                    </ng-container>\\r\\n                    <ng-container *ngIf=\\\"!statementData.length\\\">\\r\\n                        <tr>\\r\\n                            <td colspan=\\\"8\\\" class=\\\"text-center\\\">Records not found</td>\\r\\n                        </tr>\\r\\n                    </ng-container>\\r\\n                </table>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/balance-enquiry/balance-enquiry.component.html\n// module id = 349\n// module chunks = 1","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n  <div class=\\\"page\\\">\\r\\n    <div class=\\\"page-inner\\\">\\r\\n      <div class=\\\"col-12\\\" style=\\\"margin-top: 20px;\\\">\\r\\n        <h3>Change Password</h3>\\r\\n        <div class=\\\"alert alert-success\\\" *ngIf=\\\"response.length\\\">{{response}}</div>\\r\\n        <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-4\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"old_password\\\">Old Password</label>\\r\\n                    <input type=\\\"password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.old_password\\\" #old_password=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && old_password.invalid}\\\"\\r\\n                      name=\\\"old_password\\\" required />\\r\\n                    <div *ngIf=\\\"f.submitted && old_password.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"old_password.errors.required\\\">Old Password is required</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-4\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <label for=\\\"new_password\\\">New Password</label>\\r\\n                      <input type=\\\"password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.new_password\\\" #new_password=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && new_password.invalid}\\\"\\r\\n                        name=\\\"new_password\\\" required />\\r\\n                      <div *ngIf=\\\"f.submitted && new_password.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                        <div *ngIf=\\\"new_password.errors.required\\\">New Password is required</div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n            </div>\\r\\n            <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF\\\">Update</button>\\r\\n          </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/change-password/change-password.component.html\n// module id = 350\n// module chunks = 1","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n  <div class=\\\"page\\\">\\r\\n    <div class=\\\"page-inner\\\">\\r\\n      <div class=\\\"col-12\\\" style=\\\"margin-top: 20px;\\\">\\r\\n        <div class=\\\"text-right\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-info btn-xs\\\" data-toggle=\\\"modal\\\" data-target=\\\"#add_customers\\\">Add Customer</button>\\r\\n        </div>\\r\\n        <div class=\\\"text-right search\\\">\\r\\n          <input [(ngModel)]=\\\"searchText\\\" placeholder=\\\"search text goes here\\\">\\r\\n        </div>\\r\\n        <h2>Customers List</h2>\\r\\n        <table class=\\\"table table-bordered table-condensed\\\">\\r\\n          <tr>\\r\\n            <th>S. No</th>\\r\\n            <th>Customer Name</th>\\r\\n            <th>Customer Number</th>\\r\\n\\t\\t\\t<th>Date Of Birth</th>\\r\\n            <th>Email</th>\\r\\n            <th>Phone</th>\\r\\n            <th>Address</th>\\r\\n            <th width=\\\"100\\\">&nbsp;</th>\\r\\n          </tr>\\r\\n          <ng-container *ngIf=\\\"customers_list.length\\\">\\r\\n            <tr *ngFor=\\\"let customer of customers_list;let ind=index\\\">\\r\\n              <td>{{ind + 1}}</td>\\r\\n              <td>{{customer['firstName']}} {{customer['middleName']}} {{customer['lastName']}}</td>\\r\\n              <td>{{customer['customerIdNum']}}</td>\\r\\n\\t\\t\\t  <td>{{customer['customerDob']}}</td>\\t\\t\\t  \\r\\n              <td>{{customer['email']}}</td>\\r\\n              <td>{{customer['phone']}}</td>\\r\\n              <td>{{customer['address']['buildingName']}}, {{customer['address']['street'] }},\\r\\n                {{customer['address']['city'] }}</td>\\r\\n             \\r\\n\\t\\t\\t   <td>\\r\\n                <a class=\\\"btn btn-primary btn-xs\\\" (click)=\\\"editCustomer(ind, customer, customer)\\\" style=\\\"margin-right: 10px;color:#FFF\\\">\\r\\n                  <i class=\\\"icon icon-pencil\\\"></i>\\r\\n                </a>\\r\\n                <a class=\\\"btn btn-success btn-xs\\\" *ngIf=\\\"customer.activeFlag == 'Y'\\\" title=\\\"Click here to De-Activate\\\"\\r\\n                  (click)=\\\"changeCustomerStatus(ind, customer)\\\" style=\\\"color: #FFF;\\\"><i class=\\\"icon icon-remove\\\"></i></a>\\r\\n                <a class=\\\"btn btn-danger btn-xs\\\" *ngIf=\\\"customer.activeFlag == 'N'\\\" title=\\\"Click here to Activate\\\"\\r\\n                  (click)=\\\"changeCustomerStatus(ind, customer)\\\" style=\\\"color: #FFF;\\\"><i class=\\\"icon icon-remove\\\"></i></a>\\r\\n              </td>\\r\\n            </tr>\\r\\n          </ng-container>\\r\\n          <ng-container *ngIf=\\\"!customers_list.length\\\">\\r\\n            <tr>\\r\\n              <td colspan=\\\"8\\\" class=\\\"text-center\\\">Records not found</td>\\r\\n            </tr>\\r\\n          </ng-container>\\r\\n        </table>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"modal\\\" id=\\\"add_customers\\\" role=\\\"dialog\\\">\\r\\n  <div class=\\\"modal-dialog modal-lg\\\">\\r\\n    <!-- Modal content-->\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n        <div class=\\\"modal-header\\\">\\r\\n          <h4 class=\\\"modal-title\\\">Add Customer</h4>\\r\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\r\\n        </div>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"firstName\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.firstName\\\" #firstName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && firstName.invalid}\\\"\\r\\n                  name=\\\"firstName\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && firstName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"firstName.errors.required\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"lastName\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.lastName\\\" #lastName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && lastName.invalid}\\\"\\r\\n                  name=\\\"lastName\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && lastName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"lastName.errors.required\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"middleName\\\">Middle Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.middleName\\\" #middleName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && middleName.invalid}\\\"\\r\\n                  name=\\\"middleName\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && middleName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"middleName.errors.required\\\">Middle Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\t\\t  <div class=\\\"row\\\">\\r\\n\\t\\t   <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"customerIdNum\\\">Customer ID</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.customerIdNum\\\" #customerIdNum=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && customerIdNum.invalid}\\\"\\r\\n                  name=\\\"customerIdNum\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && customerIdNum.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"customerIdNum.errors.required\\\">Customer ID is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"customerDob\\\">Customer DOB</label>\\r\\n                <input type=\\\"date\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.customerDob\\\" #customerDob=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && customerDob.invalid}\\\"\\r\\n                  name=\\\"customerDob\\\" required minlength=\\\"6\\\" />\\r\\n                <div *ngIf=\\\"f.submitted && customerDob.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"customerDob.errors.required\\\">customerDob is required</div>            \\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\t\\t\\t<div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.email\\\" #email=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && email.invalid}\\\"\\r\\n                  name=\\\"email\\\" required _email />\\r\\n                <div *ngIf=\\\"f.submitted && email.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"email.errors.required\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"email.errors.email\\\">Email must be a valid email Address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\t\\t</div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"username\\\">User Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.username\\\" #username=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && username.invalid}\\\"\\r\\n                  name=\\\"username\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && username.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"username.errors.required\\\">User Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.password\\\" #password=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && password.invalid}\\\"\\r\\n                  name=\\\"password\\\" required minlength=\\\"6\\\" />\\r\\n                <div *ngIf=\\\"f.submitted && password.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"password.errors.required\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"password.errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\t\\t\\t<div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"phone\\\">Phone</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.phone\\\" #phone=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && phone.invalid}\\\"\\r\\n                  name=\\\"phone\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && phone.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"phone.errors.required\\\">Phone is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\t\\t\\t\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">       \\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.city\\\" #city=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && city.invalid}\\\"\\r\\n                  name=\\\"city\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && city.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"city.errors.required\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"state\\\">State</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.state\\\" #state=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && state.invalid}\\\"\\r\\n                  name=\\\"state\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && state.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"state.errors.required\\\">State is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"street\\\">Street</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.street\\\" #street=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && street.invalid}\\\"\\r\\n                  name=\\\"street\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && street.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"street.errors.required\\\">Street is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <!--<div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Building Address</label>\\r\\n                <textarea class=\\\"form-control\\\" [(ngModel)]=\\\"model.address\\\" #address=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && address.invalid}\\\"\\r\\n                  name=\\\"address\\\" required></textarea>\\r\\n                <div *ngIf=\\\"f.submitted && address.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"address.errors.required\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>-->\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"buildingName\\\">Building Name</label>\\r\\n                <textarea class=\\\"form-control\\\" [(ngModel)]=\\\"model.buildingName\\\" #buildingName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && buildingName.invalid}\\\"\\r\\n                  name=\\\"buildingName\\\" required></textarea>\\r\\n                <div *ngIf=\\\"f.submitted && buildingName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"buildingName.errors.required\\\">Building Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n          <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF\\\">Create</button>\\r\\n          <a class=\\\"btn btn-default btn-xs\\\" data-dismiss=\\\"modal\\\" (click)=\\\"clearForm()\\\">Close</a>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div class=\\\"modal\\\" id=\\\"edit_customers\\\" role=\\\"dialog\\\">\\r\\n  <div class=\\\"modal-dialog\\\">\\r\\n    <!-- Modal content-->\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <form name=\\\"uform\\\" (ngSubmit)=\\\"uf.form.valid && editCustomer(editIndex, model, editRow)\\\" #uf=\\\"ngForm\\\" novalidate>\\r\\n        <div class=\\\"modal-header\\\">\\r\\n          <h4 class=\\\"modal-title\\\">Edit Customer</h4>\\r\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\r\\n        </div>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_firstName\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._firstName\\\" #_firstName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _firstName.invalid}\\\"\\r\\n                  name=\\\"_firstName\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _firstName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_firstName.errors.required\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_lastName\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._lastName\\\" #_lastName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _lastName.invalid}\\\"\\r\\n                  name=\\\"_lastName\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _lastName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_lastName.errors.required\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_middleName\\\">Middle Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._middleName\\\" #_middleName=\\\"ngModel\\\"\\r\\n                  [ngClass]=\\\"{'is-invalid':uf.submitted && _middleName.invalid}\\\" name=\\\"_middleName\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _middleName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_middleName.errors.required\\\">Middle Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\t\\t  <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_customerIdNum\\\">Customer ID</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._customerIdNum\\\" #_customerIdNum=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _customerIdNum.invalid}\\\"\\r\\n                  name=\\\"_customerIdNum\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _customerIdNum.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_customerIdNum.errors.required\\\">Customer ID is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_customerDob\\\">Customer DOB</label>\\r\\n                <input type=\\\"date\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._customerDob\\\" #_customerDob=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _customerDob.invalid}\\\"\\r\\n                  name=\\\"_customerDob\\\" required minlength=\\\"6\\\" />\\r\\n                <div *ngIf=\\\"uf.submitted && _customerDob.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_customerDob.errors.required\\\">customerDob is required</div>            \\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\t\\t\\t<div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_email\\\">Email</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._email\\\" #_email=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _email.invalid}\\\"\\r\\n                  name=\\\"_email\\\" required _email />\\r\\n                <div *ngIf=\\\"uf.submitted && _email.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_email.errors.required\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"_email.errors.email\\\">Email must be a valid email Address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t <div class=\\\"row\\\">\\r\\n\\t\\t\\t <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_username\\\">User Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._username\\\" #_username=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _username.invalid}\\\"\\r\\n                  name=\\\"_username\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _username.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_username.errors.required\\\">User Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\t\\t\\t<div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._password\\\" #_password=\\\"ngModel\\\" name=\\\"_password\\\" />\\r\\n                <div *ngIf=\\\"uf.submitted && _password.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_password.errors.required\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"_password.errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n                </div>\\r\\n                <small>If you want to change, please enter new password</small>\\r\\n              </div>\\r\\n            </div>\\r\\n\\t\\t\\t<div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_phone\\\">Phone</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._phone\\\" #_phone=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _phone.invalid}\\\"\\r\\n                  name=\\\"_phone\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _phone.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_phone.errors.required\\\">Phone is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">       \\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_city\\\">City</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._city\\\" #_city=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _city.invalid}\\\"\\r\\n                  name=\\\"_city\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _city.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_city.errors.required\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_state\\\">State</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._state\\\" #_state=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _state.invalid}\\\"\\r\\n                  name=\\\"_state\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _state.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_state.errors.required\\\">State is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_street\\\">Street</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._street\\\" #_street=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _street.invalid}\\\"\\r\\n                  name=\\\"_street\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _street.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_street.errors.required\\\">Street is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <!--<div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_address\\\">Building Address</label>\\r\\n                <textarea class=\\\"form-control\\\" [(ngModel)]=\\\"model._address\\\" #_address=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _address.invalid}\\\"\\r\\n                  name=\\\"_address\\\" required></textarea>\\r\\n                <div *ngIf=\\\"uf.submitted && _address.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_address.errors.required\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>-->\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_buildingName\\\">Building Name</label>\\r\\n                <textarea class=\\\"form-control\\\" [(ngModel)]=\\\"model._buildingName\\\" #_buildingName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _buildingName.invalid}\\\"\\r\\n                  name=\\\"_buildingName\\\" required></textarea>\\r\\n                <div *ngIf=\\\"uf.submitted && _buildingName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_buildingName.errors.required\\\">Building Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n          <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF;\\\">Update</button>\\r\\n          <a class=\\\"btn btn-default btn-xs\\\" data-dismiss=\\\"modal\\\" (click)=\\\"clearForm()\\\">Close</a>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"modal\\\" id=\\\"deleeteConfirm\\\" role=\\\"dialog\\\">\\r\\n  <div class=\\\"modal-dialog\\\">\\r\\n    <!-- Modal content-->\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <!-- <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate> -->\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title\\\">Change Customer Status</h4>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\r\\n      </div>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        <p>Are you sure? <br />Do you want to Change Customer Status</p>\\r\\n      </div>\\r\\n      <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary btn-xs\\\" (click)=\\\"changeCustomerStatus(deleteIndex, deleteRow)\\\">Confirm</button>\\r\\n        <a class=\\\"btn btn-default btn-xs\\\" data-dismiss=\\\"modal\\\" (click)=\\\"clearForm()\\\">Close</a>\\r\\n      </div>\\r\\n      <!-- </form> -->\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/customer/customers.component.html\n// module id = 351\n// module chunks = 1","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n  <div class=\\\"page\\\">\\r\\n      <div class=\\\"page-inner\\\">\\r\\n          <div class=\\\"col-12 pad-left-0\\\">\\r\\n              <h2>Deposit</h2>\\r\\n              <div class=\\\"col-sm-4 pad-left-0\\\">\\r\\n                <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"accountNum\\\">Account Number:</label>\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.accountNum\\\" #accountNum=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && accountNum.invalid}\\\"\\r\\n                            name=\\\"accountNum\\\" required />\\r\\n                        <div *ngIf=\\\"f.submitted && accountNum.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"accountNum.errors.required\\\">Account Number is required</div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"balance\\\">Balance:</label>\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.balance\\\" #balance=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && balance.invalid}\\\"\\r\\n                            name=\\\"balance\\\" required />\\r\\n                        <div *ngIf=\\\"f.submitted && balance.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"balance.errors.required\\\">Balance amount is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                      <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF\\\">Submit</button>\\r\\n                  </form>\\r\\n                  <p *ngIf=\\\"successMessage\\\" class=\\\"successMsg\\\">Amount Deposited Successfully!</p>\\r\\n              </div>\\r\\n          </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/deposit/deposit.component.html\n// module id = 352\n// module chunks = 1","module.exports = \"<h2>\\r\\n  Home screen. Authentication and Authroization example using springboot and JWT\\r\\n</h2>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.html\n// module id = 353\n// module chunks = 1","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n  <div class=\\\"page\\\">\\r\\n      <div class=\\\"page-inner\\\">\\r\\n            <div class=\\\"col-12\\\">\\r\\n                <h2>Locker Operations</h2>\\r\\n                    <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"lockerNumber\\\">Locker Number</label>\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.lockerNumber\\\" #lockerNumber=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && lockerNumber.invalid}\\\"\\r\\n                                    name=\\\"lockerNumber\\\" required />\\r\\n                                <div *ngIf=\\\"f.submitted && lockerNumber.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"lockerNumber.errors.required\\\">Locker Number is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"lockerOperationDateTime\\\">Date</label>\\r\\n                                <input type=\\\"date\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.lockerOperationDateTime\\\" #lockerOperationDateTime=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && lockerOperationDateTime.invalid}\\\"\\r\\n                                    name=\\\"lockerOperationDateTime\\\" required />\\r\\n                                <div *ngIf=\\\"f.submitted && lockerOperationDateTime.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"lockerOperationDateTime.errors.required\\\">Date is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"lockerOperationInTime\\\">In Time</label>\\r\\n                                <input type=\\\"datetime-local\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.lockerOperationInTime\\\" #lockerOperationInTime=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && lockerOperationInTime.invalid}\\\"\\r\\n                                    name=\\\"lockerOperationInTime\\\" required  step=1 />\\r\\n                                <div *ngIf=\\\"f.submitted && lockerOperationInTime.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"lockerOperationInTime.errors.required\\\">In Time is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"lockerOperationOutTime\\\">Out Time</label>\\r\\n                                <input type=\\\"datetime-local\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.lockerOperationOutTime\\\" #lockerOperationOutTime=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && lockerOperationOutTime.invalid}\\\"\\r\\n                                    name=\\\"lockerOperationOutTime\\\" required step=1 />\\r\\n                                <div *ngIf=\\\"f.submitted && lockerOperationOutTime.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"lockerOperationOutTime.errors.required\\\">Out Time is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div> \\r\\n                <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF\\\">Submit</button>  \\r\\n                </form>\\r\\n                <p *ngIf=\\\"successMessage\\\" class=\\\"successMsg\\\">Locker Operation Saved Successfully!</p>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-12\\\">\\r\\n                <h2>Report Locker</h2>\\r\\n                <form [formGroup]=\\\"reportLockerForm\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <div class=\\\"col-sm-4\\\" style=\\\"padding-left: 0px;\\\">\\r\\n                            <label>Locker Number:</label>\\r\\n                            <input type=\\\"text\\\" formControlName=\\\"lockerNumber\\\" class=\\\"form-control\\\"/>\\r\\n                            <!-- <div *ngIf=\\\"submitted && f.lockerNumber.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                <div *ngIf=\\\"f.lockerNumber.errors.required\\\">Locker Number is required</div>\\r\\n                            </div> -->\\r\\n                        </div>    \\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Locker Operation Date</label>\\r\\n                                <input type=\\\"date\\\" class=\\\"form-control\\\" formControlName=\\\"lockerOptDate\\\" />\\r\\n                                <!-- <div *ngIf=\\\"f.submitted && lockerOptDate.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"lockerOptDate.errors.required\\\">Locker Operation Date is required</div>\\r\\n                                </div> -->\\r\\n                            </div>\\r\\n                        </div>                    \\r\\n                    </div>\\r\\n                    <div class=\\\"cleaner\\\"></div>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary btn-xs\\\" (click)=\\\"showLockerReport()\\\">Submit&nbsp;\\r\\n                        <i class=\\\"fa fa-search\\\"></i>\\r\\n                    </button>\\r\\n                </form>                \\r\\n                <div class=\\\"cleaner\\\"></div>\\r\\n                <div class=\\\"mar-t-15\\\">\\r\\n                    <table *ngIf=\\\"showTable\\\" class=\\\"table table-bordered table-condensed\\\">\\r\\n                        <tr>\\r\\n                            <th>Locker Number</th>\\r\\n                            <th>Locker Operation In Time</th>\\r\\n                            <th>Locker Operation Out Time</th>\\r\\n                        </tr>\\r\\n                        <ng-container *ngIf=\\\"reportLockerData.length\\\">\\r\\n                            <tr *ngFor=\\\"let locker of reportLockerData;let ind=index\\\">\\r\\n                                <td>{{locker['lockerNum']}}</td>\\r\\n                                <td>{{locker['lockerOperationInTime']}}</td>\\r\\n                                <td>{{locker['lockerOperationOutTime']}}</td>                            \\r\\n                            </tr>\\r\\n                        </ng-container>\\r\\n                        <ng-container *ngIf=\\\"!reportLockerData.length\\\">\\r\\n                            <tr>\\r\\n                                <td colspan=\\\"8\\\" class=\\\"text-center\\\">Records not found</td>\\r\\n                            </tr>\\r\\n                        </ng-container>\\r\\n                    </table>\\r\\n                </div>\\r\\n            </div>\\r\\n            \\r\\n            <div class=\\\"col-12\\\">\\r\\n                <h2>Add Locker</h2>\\r\\n                <form name=\\\"add_locker\\\" (ngSubmit)=\\\"fr.form.valid && addLocker()\\\" #fr=\\\"ngForm\\\" novalidate>\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"accountNum\\\">Account Number:</label>\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.accountNum\\\" #accountNum=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':fr.submitted && accountNum.invalid}\\\"\\r\\n                                    name=\\\"accountNum\\\" required />\\r\\n                                <div *ngIf=\\\"fr.submitted && accountNum.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"accountNum.errors.required\\\">Account Number is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"lockerNumber\\\">Locker Number:</label>\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.lockerNumber\\\" #lockerNumber=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':fr.submitted && lockerNumber.invalid}\\\"\\r\\n                                    name=\\\"lockerNumber\\\" required />\\r\\n                                <div *ngIf=\\\"fr.submitted && lockerNumber.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"lockerNumber.errors.required\\\">Locker Number is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-3\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"lockerAssignedBy\\\">Locker AssignedBy:</label>\\r\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.lockerAssignedBy\\\" #lockerAssignedBy=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':fr.submitted && lockerAssignedBy.invalid}\\\"\\r\\n                                    name=\\\"lockerAssignedBy\\\" required />\\r\\n                                <div *ngIf=\\\"fr.submitted && lockerAssignedBy.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"lockerAssignedBy.errors.required\\\">locker AssignedBy is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF\\\">Submit</button>\\r\\n                </form>\\r\\n                <p *ngIf=\\\"successMessage\\\" class=\\\"successMsg\\\">Added Locker  Successfully!</p>\\r\\n            </div>\\r\\n\\r\\n      </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/locker-operations/locker-operations.component.html\n// module id = 354\n// module chunks = 1","module.exports = \"<!-- <p>Non-admin username and password: john.doe and jwtpass</p>\\r\\n<p>Admin user: admin.admin and jwtpass</p> -->\\r\\n\\r\\n<div class=\\\"form-wrapper\\\">\\r\\n  <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && login()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'has-error': f.submitted && !username.valid }\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" [(ngModel)]=\\\"model.username\\\" #username=\\\"ngModel\\\"\\r\\n             required placeholder=\\\"Username\\\"/>\\r\\n      <div *ngIf=\\\"f.submitted && !username.valid\\\" class=\\\"help-block\\\">Username is required</div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" [ngClass]=\\\"{ 'has-error': f.submitted && !password.valid }\\\">\\r\\n      <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"model.password\\\" #password=\\\"ngModel\\\"\\r\\n             required placeholder=\\\"Password\\\"/>\\r\\n      <div *ngIf=\\\"f.submitted && !password.valid\\\" class=\\\"help-block\\\">Password is required</div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Sign In</button>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\r\\n  </form>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/login/login.component.html\n// module id = 355\n// module chunks = 1","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n  <div class=\\\"page\\\">\\r\\n    <div class=\\\"page-inner\\\">\\r\\n      <div class=\\\"col-12\\\" style=\\\"margin-top: 20px;\\\">\\r\\n        <div class=\\\"text-right\\\">\\r\\n          <button type=\\\"button\\\" class=\\\"btn btn-info btn-xs\\\" data-toggle=\\\"modal\\\" data-target=\\\"#add_accounts\\\">Add User</button>\\r\\n        </div>\\r\\n        <h2>User's List</h2>\\r\\n        <table class=\\\"table table-bordered table-condensed\\\">\\r\\n          <tr>\\r\\n            <th>S. No</th>\\r\\n            <th>Full Name</th>\\r\\n            <th>User Name</th>\\r\\n            <th>Email</th>\\r\\n            <th>Phone</th>\\r\\n            <th>Address</th>\\r\\n            <th width=\\\"100\\\">&nbsp;</th>\\r\\n          </tr>\\r\\n          <ng-container *ngIf=\\\"accounts_list.length\\\">\\r\\n            <tr *ngFor=\\\"let account of accounts_list;let ind=index\\\">\\r\\n              <td>{{ind + 1}}</td>\\r\\n              <td>{{account['firstName']}} {{account['middleName']}} {{account['lastName']}}</td>\\r\\n              <td>{{account['username']}}</td>\\r\\n              <td>{{account['email']}}</td>\\r\\n              <td>{{account['phone']}}</td>\\r\\n              <td>{{account['address']['buildingName']}}, {{account['address']['street'] }},\\r\\n                {{account['address']['city'] }}</td>\\r\\n              <td>\\r\\n                <a class=\\\"btn btn-primary btn-xs\\\" (click)=\\\"editAccount(ind, account, account)\\\" style=\\\"margin-right: 10px;color:#FFF\\\">\\r\\n                  <i class=\\\"icon icon-pencil\\\"></i>\\r\\n                </a>\\r\\n                <a class=\\\"btn btn-success btn-xs\\\" *ngIf=\\\"account.activeFlag == 'Y'\\\" title=\\\"Click here to De-Activate\\\"\\r\\n                  (click)=\\\"changeAccountStatus(ind, account)\\\" style=\\\"color: #FFF;\\\"><i class=\\\"icon icon-remove\\\"></i></a>\\r\\n                <a class=\\\"btn btn-danger btn-xs\\\" *ngIf=\\\"account.activeFlag == 'N'\\\" title=\\\"Click here to Activate\\\"\\r\\n                  (click)=\\\"changeAccountStatus(ind, account)\\\" style=\\\"color: #FFF;\\\"><i class=\\\"icon icon-remove\\\"></i></a>\\r\\n              </td>\\r\\n            </tr>\\r\\n          </ng-container>\\r\\n          <ng-container *ngIf=\\\"!accounts_list.length\\\">\\r\\n            <tr>\\r\\n              <td colspan=\\\"7\\\" class=\\\"text-center\\\">Records not found</td>\\r\\n            </tr>\\r\\n          </ng-container>\\r\\n        </table>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"modal\\\" id=\\\"add_accounts\\\" role=\\\"dialog\\\">\\r\\n  <div class=\\\"modal-dialog modal-lg\\\">\\r\\n    <!-- Modal content-->\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n        <div class=\\\"modal-header\\\">\\r\\n          <h4 class=\\\"modal-title\\\">Add User</h4>\\r\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\r\\n        </div>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"firstName\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.firstName\\\" #firstName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && firstName.invalid}\\\"\\r\\n                  name=\\\"firstName\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && firstName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"firstName.errors.required\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"lastName\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.lastName\\\" #lastName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && lastName.invalid}\\\"\\r\\n                  name=\\\"lastName\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && lastName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"lastName.errors.required\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"middleName\\\">Middle Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.middleName\\\" #middleName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && middleName.invalid}\\\"\\r\\n                  name=\\\"middleName\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && middleName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"middleName.errors.required\\\">Middle Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"username\\\">User Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.username\\\" #username=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && username.invalid}\\\"\\r\\n                  name=\\\"username\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && username.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"username.errors.required\\\">User Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.password\\\" #password=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && password.invalid}\\\"\\r\\n                  name=\\\"password\\\" required minlength=\\\"6\\\" />\\r\\n                <div *ngIf=\\\"f.submitted && password.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"password.errors.required\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"password.errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.email\\\" #email=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && email.invalid}\\\"\\r\\n                  name=\\\"email\\\" required email />\\r\\n                <div *ngIf=\\\"f.submitted && email.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"email.errors.required\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"email.errors.email\\\">Email must be a valid email Address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"phone\\\">Phone</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.phone\\\" #phone=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && phone.invalid}\\\"\\r\\n                  name=\\\"phone\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && phone.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"phone.errors.required\\\">Phone is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.city\\\" #city=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && city.invalid}\\\"\\r\\n                  name=\\\"city\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && city.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"city.errors.required\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"state\\\">State</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.state\\\" #state=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && state.invalid}\\\"\\r\\n                  name=\\\"state\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && state.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"state.errors.required\\\">State is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"street\\\">Street</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.street\\\" #street=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && street.invalid}\\\"\\r\\n                  name=\\\"street\\\" required />\\r\\n                <div *ngIf=\\\"f.submitted && street.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"street.errors.required\\\">Street is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <!--<div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Building Address</label>\\r\\n                <textarea class=\\\"form-control\\\" [(ngModel)]=\\\"model.address\\\" #address=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && address.invalid}\\\"\\r\\n                  name=\\\"address\\\" required></textarea>\\r\\n                <div *ngIf=\\\"f.submitted && address.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"address.errors.required\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>-->\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"buildingName\\\">Building Name</label>\\r\\n                <textarea class=\\\"form-control\\\" [(ngModel)]=\\\"model.buildingName\\\" #buildingName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && buildingName.invalid}\\\"\\r\\n                  name=\\\"buildingName\\\" required></textarea>\\r\\n                <div *ngIf=\\\"f.submitted && buildingName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"buildingName.errors.required\\\">Building Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n          <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF\\\">Create</button>\\r\\n          <a class=\\\"btn btn-default btn-xs\\\" data-dismiss=\\\"modal\\\" (click)=\\\"clearForm()\\\">Close</a>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div class=\\\"modal\\\" id=\\\"edit_accounts\\\" role=\\\"dialog\\\">\\r\\n  <div class=\\\"modal-dialog\\\">\\r\\n    <!-- Modal content-->\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <form name=\\\"uform\\\" (ngSubmit)=\\\"uf.form.valid && editAccount(editIndex, model, editRow)\\\" #uf=\\\"ngForm\\\" novalidate>\\r\\n        <div class=\\\"modal-header\\\">\\r\\n          <h4 class=\\\"modal-title\\\">Edit User</h4>\\r\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\r\\n        </div>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_firstName\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._firstName\\\" #_firstName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _firstName.invalid}\\\"\\r\\n                  name=\\\"_firstName\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _firstName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_firstName.errors.required\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_lastName\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._lastName\\\" #_lastName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _lastName.invalid}\\\"\\r\\n                  name=\\\"_lastName\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _lastName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_lastName.errors.required\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_middleName\\\">Middle Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._middleName\\\" #_middleName=\\\"ngModel\\\"\\r\\n                  [ngClass]=\\\"{'is-invalid':uf.submitted && _middleName.invalid}\\\" name=\\\"_middleName\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _middleName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_middleName.errors.required\\\">Middle Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_username\\\">User Name</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._username\\\" #_username=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _username.invalid}\\\"\\r\\n                  name=\\\"_username\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _username.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_username.errors.required\\\">User Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._password\\\" #_password=\\\"ngModel\\\" name=\\\"_password\\\" />\\r\\n                <div *ngIf=\\\"uf.submitted && _password.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_password.errors.required\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"_password.errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n                </div>\\r\\n                <small>If you want to change, please enter new password</small>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_email\\\">Email</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._email\\\" #_email=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _email.invalid}\\\"\\r\\n                  name=\\\"_email\\\" required _email />\\r\\n                <div *ngIf=\\\"uf.submitted && _email.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_email.errors.required\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"_email.errors.email\\\">Email must be a valid email Address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_phone\\\">Phone</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._phone\\\" #_phone=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _phone.invalid}\\\"\\r\\n                  name=\\\"_phone\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _phone.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_phone.errors.required\\\">Phone is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_city\\\">City</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._city\\\" #_city=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _city.invalid}\\\"\\r\\n                  name=\\\"_city\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _city.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_city.errors.required\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_state\\\">State</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._state\\\" #_state=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _state.invalid}\\\"\\r\\n                  name=\\\"_state\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _state.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_state.errors.required\\\">State is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col-md-3\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_street\\\">Street</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model._street\\\" #_street=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _street.invalid}\\\"\\r\\n                  name=\\\"_street\\\" required />\\r\\n                <div *ngIf=\\\"uf.submitted && _street.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_street.errors.required\\\">Street is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <!--<div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_address\\\">Building Address</label>\\r\\n                <textarea class=\\\"form-control\\\" [(ngModel)]=\\\"model._address\\\" #_address=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _address.invalid}\\\"\\r\\n                  name=\\\"_address\\\" required></textarea>\\r\\n                <div *ngIf=\\\"uf.submitted && _address.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_address.errors.required\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>-->\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"_buildingName\\\">Building Name</label>\\r\\n                <textarea class=\\\"form-control\\\" [(ngModel)]=\\\"model._buildingName\\\" #_buildingName=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':uf.submitted && _buildingName.invalid}\\\"\\r\\n                  name=\\\"_buildingName\\\" required></textarea>\\r\\n                <div *ngIf=\\\"uf.submitted && _buildingName.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"_buildingName.errors.required\\\">Building Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n          <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF;\\\">Update</button>\\r\\n          <a class=\\\"btn btn-default btn-xs\\\" data-dismiss=\\\"modal\\\" (click)=\\\"clearForm()\\\">Close</a>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"modal\\\" id=\\\"deleeteConfirm\\\" role=\\\"dialog\\\">\\r\\n  <div class=\\\"modal-dialog\\\">\\r\\n    <!-- Modal content-->\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <!-- <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate> -->\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title\\\">Change User Status</h4>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\r\\n      </div>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        <p>Are you sure? <br />Do you want to Change User Status</p>\\r\\n      </div>\\r\\n      <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary btn-xs\\\" (click)=\\\"changeAccountStatus(deleteIndex, deleteRow)\\\">Confirm</button>\\r\\n        <a class=\\\"btn btn-default btn-xs\\\" data-dismiss=\\\"modal\\\" (click)=\\\"clearForm()\\\">Close</a>\\r\\n      </div>\\r\\n      <!-- </form> -->\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/user/user.component.html\n// module id = 356\n// module chunks = 1","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n  <div class=\\\"page\\\">\\r\\n      <div class=\\\"page-inner\\\">\\r\\n          <div class=\\\"col-12 pad-left-0\\\">\\r\\n              <h2>Withdraw</h2>\\r\\n              <div class=\\\"col-sm-4 pad-left-0\\\">\\r\\n                <form name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"accountNum\\\">Account Number:</label>\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.accountNum\\\" #accountNum=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && accountNum.invalid}\\\"\\r\\n                            name=\\\"accountNum\\\" required />\\r\\n                        <div *ngIf=\\\"f.submitted && accountNum.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"accountNum.errors.required\\\">Account Number is required</div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"balance\\\">Balance:</label>\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"model.balance\\\" #balance=\\\"ngModel\\\" [ngClass]=\\\"{'is-invalid':f.submitted && balance.invalid}\\\"\\r\\n                            name=\\\"balance\\\" required />\\r\\n                        <div *ngIf=\\\"f.submitted && balance.invalid\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"balance.errors.required\\\">Balance amount is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                      <button class=\\\"btn btn-primary btn-xs\\\" style=\\\"color: #FFF\\\">Submit</button>\\r\\n                  </form>\\r\\n                  <p *ngIf=\\\"successMessage\\\" class=\\\"successMsg\\\">Amount Withdraw Successfully!</p>\\r\\n              </div>\\r\\n          </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/withdraw/withdraw.component.html\n// module id = 357\n// module chunks = 1","import {Injectable} from '@angular/core';\r\nimport {JwtHelper} from 'angular2-jwt';\r\n\r\nimport {TOKEN_NAME} from '../services/auth.constant';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  jwtHelper: JwtHelper = new JwtHelper();\r\n  accessToken: string;\r\n  isAdmin: boolean;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  login(accessToken: string) {\r\n    const decodedToken = this.jwtHelper.decodeToken(accessToken);\r\n    console.log(decodedToken);\r\n\r\n    this.isAdmin = decodedToken.authorities.some(el => el === 'ADMIN_USER');\r\n    this.accessToken = accessToken;\r\n\r\n    localStorage.setItem(TOKEN_NAME, accessToken);\r\n  }\r\n\r\n  logout() {\r\n    this.accessToken = null;\r\n    this.isAdmin = false;\r\n    localStorage.removeItem(TOKEN_NAME);\r\n  }\r\n\r\n  isAdminUser(): boolean {\r\n    return this.isAdmin;\r\n  }\r\n\r\n  isUser(): boolean {\r\n    console.log(this.accessToken)\r\n    return this.accessToken && !this.isAdmin;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/user.service.ts","export const TOKEN_AUTH_USERNAME = 'sciits-client';\r\nexport const TOKEN_AUTH_PASSWORD = 'sciits-secret';\r\nexport const TOKEN_NAME = 'access_token';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/auth.constant.ts","import {Injectable} from '@angular/core';\r\nimport {Http, Headers} from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\n\r\nimport {TOKEN_AUTH_PASSWORD, TOKEN_AUTH_USERNAME, TOKEN_NAME} from '../services/auth.constant';\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n  static AUTH_TOKEN = '/auth/api/v1/user/login';\r\n  accessToken: string;\r\n  isAdmin: boolean;\r\n\r\n  constructor(private http: Http) { }\r\n\r\n  login(username: string, password: string) {\r\n    const body = `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}&grant_type=password`;\r\n\r\n    const headers = new Headers();\r\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\r\n    headers.append('Authorization', 'Basic ' + btoa(TOKEN_AUTH_USERNAME + ':' + TOKEN_AUTH_PASSWORD));\r\n\r\n    return this.http.post(AuthenticationService.AUTH_TOKEN, body, {headers})\r\n      .map(res => res.json())\r\n      .map((res: any) => {\r\n        if (res.access_token) {\r\n          this.accessToken = res.access_token;\r\n          localStorage.setItem(TOKEN_NAME, res.access_token)\r\n          return res.access_token;\r\n        }\r\n        return null;\r\n      });\r\n  }  \r\n  logout() {\r\n    this.accessToken = null;\r\n    this.isAdmin = false;\r\n    localStorage.removeItem(TOKEN_NAME);\r\n    //window.location.href = \"http://localhost/index.html\";\r\n  }\r\n  isUser(): boolean {\r\n    return this.accessToken ? true : (localStorage.getItem(TOKEN_NAME) ? true : false);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/authentication.service.ts"],"sourceRoot":""}